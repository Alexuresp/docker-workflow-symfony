sudo: required

language: php

php:
    - 7.2

services:
    - docker

env:
    global:
        - secure: "bVSEkJFCQ4xuL4Lxs7CS78Pfj9EeFkgDAd39m/8RRSg2WoPQ9ghQTLLsJ18xN9agGkGL30VeDxZT2txxcrx2JD2NIkA/sAQxLKM5aW8VVrhO4pRpswipK2ffhl6GrHzj2MzxU18R3txRnOu5xrkV4pLMVhqGverM8PgTfXdONPvU6mD9MB0xO5wi7LiVB0+Yx3Mav7VolWvjsGW1SolB7Ib/aGUOhd7E/uSzTNP/u8w/ZUt1yDVw1ZnHPPHTXaDdlv7KF1BA4+ugmTF9Jc4DJ0GYi/kV5wEG7nTP3sMSeq4F2UxT2rX3v93Hin2XNHE417VyEb79D5zQ8vBWOa9hky3kxDNqCGM37xJhv4RsSGHtukZYxEroMHJ22bHxM38DVvkhQ3qp6r4P46pXx9FFirfph+x2PJxOSsRCiQ5+/I/ke9ZQSzsx1PgXnn2645nWfcJymEa5ojg1K1o2eQSXgl5fIZ3bYTktEQrxK3L40TYnBeYIcTEmbT4NUp4G6Yft6YPTCSbgS8sf7e3lfMBY9a9YZtUY1sLgj8oMQnmfw58P4zO9PFVrODvOpZ1CBGSMJQ6HI9ULSNZ3sC0PwZDOqx4CAOHcwBNzyXx97rQi1f3J4rqI0aqmArpBosuXKsyyU2J1dO479L/JJZ7/A97XjIKUBcwBxo/CJHj9JOV9NEg="
        - secure: "f3qorap6yMRvOxIrgBqgJHA17ReNPJybVtIvsW+jlcMk2kk/4bgU6T6TSvwEygEF35MXT0f3WW4mqwvynRCsppjYlCXMGdbQMP1LrCn9g+O0iHL8UYob+ySopVMq61AFdi/esrnqn1PTLmA4am1IqG1wZPxG5mUVBiF9xWx/vNc/ee5ubTI06ujmNbtpIYv47OSgwbi9DLubwZztiOabXXbkODO8YzWK9+vYQ2XZfm2+5+QyIwLceby0kcxx1XU5SvNbqra3b8RfmywZEvxllKaRirK+wCVvBvxMhFh78zMyX1Rn35kGT2RZ5372BqW3vKtDElLGzJM672cZIi4uON7amLObFNCLyRhyoSegN57DHzX3lkRzdq0A/YRIImacvS/n3SIX0tHaiU2c+R5E+J92T0x8NwxxkoiqiISPatN7NDw3bmr5mZsz//4dLQ32w8ehCHgMTwmmqz+nAacudOJc4qaVyB0l6oEqXEb8E4F3YXbdhEqVavhDCZW3azYR+zA43V9JBgqXrGhSCQ2swRO+OAovZqZlHvxSbOQY8M5KD3hPallohv6k4GFEDCbQbMIkuz23Ep35BtaR4cRzz4sMNZaDAtLMmwcUogQgtsQ75+jrZ1Jul/VOnhvkp6U5I5VNnNvzf8nAnQ330g/ldcWNMSbuaQqjGcR64VRWHRA="
        - CI_APP_IMAGE_WITH_TAG=quay.io/covex_nn/dsw-app:latest
        - CI_DEV_IMAGE_WITH_TAG=quay.io/covex_nn/dsw-dev:latest
        - CI_NGINX_IMAGE_WITH_TAG=quay.io/covex_nn/dsw-nginx:latest
        - CI_SOURCE_IMAGE_WITH_TAG=quay.io/covex_nn/dsw-source:latest
        - DOCKER_COMPOSE_VERSION=1.17.1
        - SERVER_NAME=docker.local

matrix:
    include:
        - env: DOCKER_ENV="local" DOCKER_SERVICES=(mysql) ENV_database_host="127.0.0.1"
        - env: DOCKER_ENV="local_docker" DOCKER_SERVICES=(nginx mysql php)
        - env: DOCKER_ENV="remote" DOCKER_SERVICES=(nginx mysql php spare)

before_install:
    - if [ $COMPOSER_GITHUB_TOKEN ]; then
          echo '{"github-oauth":{"github.com":"'"$COMPOSER_GITHUB_TOKEN"'"}}' > auth.json;
      else
          echo '{ }' > auth.json;
      fi

install:
    - mkdir --parents "${HOME}/bin";
    - sudo rm /usr/local/bin/docker-compose
    - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
    - chmod +x docker-compose
    - sudo mv docker-compose /usr/local/bin
    - if [ $DOCKER_ENV == 'local' ] || [ $DOCKER_ENV == 'local_docker' ]; then
          wget "https://www.phing.info/get/phing-latest.phar" --output-document="${HOME}/bin/phing";
          chmod u+x "${HOME}/bin/phing";
      fi

before_script:
    - sudo service mysql stop;
    - if [ $DOCKER_ENV == 'local' ]; then
          docker-compose up -d;
          composer install;
          phing;
      fi
    - if [ $DOCKER_ENV == 'local_docker' ]; then
          cp docker-compose.override.yml.dist docker-compose.override.yml;
          docker-compose up -d;
          composer install;
          docker-compose exec -T php phing;
      fi
    - if [ $DOCKER_ENV == 'remote' ]; then
          if [ $QUAY_CLI_PASSWORD ]; then
              docker login -u covex_nn -p $QUAY_CLI_PASSWORD quay.io;
              docker pull $CI_DEV_IMAGE_WITH_TAG || true;
              docker pull $CI_SOURCE_IMAGE_WITH_TAG || true;
              docker pull $CI_APP_IMAGE_WITH_TAG || true;
              docker pull $CI_NGINX_IMAGE_WITH_TAG || true;
          fi;
          mkdir build;
          docker build
              --cache-from $CI_DEV_IMAGE_WITH_TAG
              --tag $CI_DEV_IMAGE_WITH_TAG
              --target dev .;
          docker build
              --cache-from $CI_DEV_IMAGE_WITH_TAG
              --cache-from $CI_SOURCE_IMAGE_WITH_TAG
              --tag $CI_SOURCE_IMAGE_WITH_TAG
              --target source .;
          docker build
              --cache-from $CI_DEV_IMAGE_WITH_TAG
              --cache-from $CI_SOURCE_IMAGE_WITH_TAG
              --cache-from $CI_APP_IMAGE_WITH_TAG
              --build-arg source_image=$CI_SOURCE_IMAGE_WITH_TAG
              --tag $CI_APP_IMAGE_WITH_TAG
              --target prod .;
          docker build
              --cache-from $CI_NGINX_IMAGE_WITH_TAG
              --build-arg server_upstream=prod
              --build-arg app_image=$CI_SOURCE_IMAGE_WITH_TAG
              --tag $CI_NGINX_IMAGE_WITH_TAG
              --target prod --file Dockerfile-nginx .;
          if [ $QUAY_CLI_PASSWORD ] && [ $TRAVIS_BRANCH == 'master' ]; then
              docker push $CI_DEV_IMAGE_WITH_TAG;
              docker push $CI_SOURCE_IMAGE_WITH_TAG;
              docker push $CI_APP_IMAGE_WITH_TAG;
              docker push $CI_NGINX_IMAGE_WITH_TAG;
              docker logout quay.io;
          fi;
          docker-compose -f docker-compose.deploy.yml config > build/docker-compose.yml;
          cd build;
          cat docker-compose.yml;
          docker-compose up -d --no-recreate;
          docker-compose up -d --force-recreate --no-deps spare;
          docker-compose exec -T spare phing app-deploy storage-prepare database-deploy -Dsymfony.env=prod;
          docker-compose up -d --force-recreate --no-deps php;
          docker-compose exec -T php cron;
          docker-compose stop nginx;
          docker-compose up -d nginx;
      fi

script:
    - if [ $DOCKER_ENV == 'local' ]; then
          bin/phpunit;
      fi
    - if [ $DOCKER_ENV == 'local_docker' ]; then
          docker-compose exec -T php curl -L -o phpunit.phar https://phar.phpunit.de/phpunit-6.phar;
          docker-compose exec -T php php phpunit.phar;
      fi
    - for (( i=0; i<${#DOCKER_SERVICES[@]}; i++ )) do
          ID=$(docker-compose ps -q ${DOCKER_SERVICES[$i]});
          PORT=$(docker ps --filter id=$ID --filter status=running --format "{{.Ports}}");
          if [ ! $PORT ]; then
              exit 1;
          fi
      done

after_success:
    - docker-compose images
    - docker-compose ps
    - docker-compose logs

after_failure:
    - docker-compose ps
    - docker-compose logs
